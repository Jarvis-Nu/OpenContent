// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AudioPost extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AudioPost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AudioPost must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AudioPost", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): AudioPost | null {
    return changetype<AudioPost | null>(
      store.get("AudioPost", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get nameOfPost(): string {
    let value = this.get("nameOfPost");
    return value!.toString();
  }

  set nameOfPost(value: string) {
    this.set("nameOfPost", Value.fromString(value));
  }

  get postDescription(): string {
    let value = this.get("postDescription");
    return value!.toString();
  }

  set postDescription(value: string) {
    this.set("postDescription", Value.fromString(value));
  }

  get thumbnailUrl(): string {
    let value = this.get("thumbnailUrl");
    return value!.toString();
  }

  set thumbnailUrl(value: string) {
    this.set("thumbnailUrl", Value.fromString(value));
  }

  get postContent(): string {
    let value = this.get("postContent");
    return value!.toString();
  }

  set postContent(value: string) {
    this.set("postContent", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get audioTitle(): string {
    let value = this.get("audioTitle");
    return value!.toString();
  }

  set audioTitle(value: string) {
    this.set("audioTitle", Value.fromString(value));
  }

  get audioUrl(): string {
    let value = this.get("audioUrl");
    return value!.toString();
  }

  set audioUrl(value: string) {
    this.set("audioUrl", Value.fromString(value));
  }

  get audioThumbnail(): string {
    let value = this.get("audioThumbnail");
    return value!.toString();
  }

  set audioThumbnail(value: string) {
    this.set("audioThumbnail", Value.fromString(value));
  }

  get authorName(): string {
    let value = this.get("authorName");
    return value!.toString();
  }

  set authorName(value: string) {
    this.set("authorName", Value.fromString(value));
  }

  get authorThumbnail(): string {
    let value = this.get("authorThumbnail");
    return value!.toString();
  }

  set authorThumbnail(value: string) {
    this.set("authorThumbnail", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class BlogPost extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlogPost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BlogPost must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlogPost", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): BlogPost | null {
    return changetype<BlogPost | null>(store.get("BlogPost", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get nameOfPost(): string {
    let value = this.get("nameOfPost");
    return value!.toString();
  }

  set nameOfPost(value: string) {
    this.set("nameOfPost", Value.fromString(value));
  }

  get postDescription(): string {
    let value = this.get("postDescription");
    return value!.toString();
  }

  set postDescription(value: string) {
    this.set("postDescription", Value.fromString(value));
  }

  get thumbnailUrl(): string {
    let value = this.get("thumbnailUrl");
    return value!.toString();
  }

  set thumbnailUrl(value: string) {
    this.set("thumbnailUrl", Value.fromString(value));
  }

  get postContent(): string {
    let value = this.get("postContent");
    return value!.toString();
  }

  set postContent(value: string) {
    this.set("postContent", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get authorName(): string {
    let value = this.get("authorName");
    return value!.toString();
  }

  set authorName(value: string) {
    this.set("authorName", Value.fromString(value));
  }

  get authorThumbnail(): string {
    let value = this.get("authorThumbnail");
    return value!.toString();
  }

  set authorThumbnail(value: string) {
    this.set("authorThumbnail", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class VideoPost extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VideoPost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type VideoPost must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VideoPost", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): VideoPost | null {
    return changetype<VideoPost | null>(
      store.get("VideoPost", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get nameOfPost(): string {
    let value = this.get("nameOfPost");
    return value!.toString();
  }

  set nameOfPost(value: string) {
    this.set("nameOfPost", Value.fromString(value));
  }

  get postDescription(): string {
    let value = this.get("postDescription");
    return value!.toString();
  }

  set postDescription(value: string) {
    this.set("postDescription", Value.fromString(value));
  }

  get thumbnailUrl(): string {
    let value = this.get("thumbnailUrl");
    return value!.toString();
  }

  set thumbnailUrl(value: string) {
    this.set("thumbnailUrl", Value.fromString(value));
  }

  get postContent(): string {
    let value = this.get("postContent");
    return value!.toString();
  }

  set postContent(value: string) {
    this.set("postContent", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get videoTitle(): string {
    let value = this.get("videoTitle");
    return value!.toString();
  }

  set videoTitle(value: string) {
    this.set("videoTitle", Value.fromString(value));
  }

  get videoUrl(): string {
    let value = this.get("videoUrl");
    return value!.toString();
  }

  set videoUrl(value: string) {
    this.set("videoUrl", Value.fromString(value));
  }

  get videoThumbnail(): string {
    let value = this.get("videoThumbnail");
    return value!.toString();
  }

  set videoThumbnail(value: string) {
    this.set("videoThumbnail", Value.fromString(value));
  }

  get authorName(): string {
    let value = this.get("authorName");
    return value!.toString();
  }

  set authorName(value: string) {
    this.set("authorName", Value.fromString(value));
  }

  get authorThumbnail(): string {
    let value = this.get("authorThumbnail");
    return value!.toString();
  }

  set authorThumbnail(value: string) {
    this.set("authorThumbnail", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
